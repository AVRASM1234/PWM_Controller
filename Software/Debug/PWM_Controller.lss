
PWM_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000490  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d0  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001c5  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d9  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000086  00000000  00000000  0000101d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000010a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
   2:	96 c0       	rjmp	.+300    	; 0x130 <__bad_interrupt>
   4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
   6:	94 c0       	rjmp	.+296    	; 0x130 <__bad_interrupt>
   8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
   a:	92 c0       	rjmp	.+292    	; 0x130 <__bad_interrupt>
   c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
   e:	90 c0       	rjmp	.+288    	; 0x130 <__bad_interrupt>
  10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
  12:	c5 c0       	rjmp	.+394    	; 0x19e <__vector_9>

00000014 <PerToFill>:
  14:	00 00 00 00 00 01 01 01 01 01 01 01 01 01 01 01     ................
  24:	01 01 01 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
  34:	02 02 02 02 02 02 02 02 02 02 02 03 03 03 03 03     ................
  44:	03 03 03 03 03 03 03 03 03 03 04 04 04 04 04 04     ................
  54:	04 04 04 04 04 04 05 05 05 05 05 05 05 05 05 06     ................
  64:	06 06 06 06 06 06 06 07 07 07 07 07 07 08 08 08     ................
  74:	08 08 08 09 09 09 09 09 0a 0a 0a 0a 0a 0b 0b 0b     ................
  84:	0b 0c 0c 0c 0c 0d 0d 0d 0e 0e 0e 0e 0f 0f 0f 10     ................
  94:	10 10 11 11 12 12 12 13 13 14 14 14 15 15 16 16     ................
  a4:	17 17 18 18 19 19 1a 1b 1b 1c 1c 1d 1e 1e 1f 20     ............... 
  b4:	20 21 22 23 23 24 25 26 26 27 28 29 2a 2b 2c 2d      !"##$%&&'()*+,-
  c4:	2e 2f 30 31 32 33 34 35 37 38 39 3a 3b 3d 3e 3f     ./012345789:;=>?
  d4:	41 42 44 45 47 48 4a 4c 4d 4f 51 52 54 56 58 5a     ABDEGHJLMOQRTVXZ
  e4:	5c 5e 60 62 64 66 69 6b 6d 70 72 75 77 7a 7c 7f     \^`bdfikmpruwz|.
  f4:	82 85 88 8b 8e 91 94 97 9b 9e a2 a5 a9 ac b0 b4     ................
 104:	b8 bc c0 c4 c9 cd d2 d6 db e0 e5 ea ef f4 f9 ff     ................

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf e9       	ldi	r28, 0x9F	; 159
 11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_clear_bss>:
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	a0 e6       	ldi	r26, 0x60	; 96
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
 124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
 126:	a2 36       	cpi	r26, 0x62	; 98
 128:	b2 07       	cpc	r27, r18
 12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
 12c:	02 d0       	rcall	.+4      	; 0x132 <main>
 12e:	4b c0       	rjmp	.+150    	; 0x1c6 <_exit>

00000130 <__bad_interrupt>:
 130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <main>:
	0xDB, 0xE0, 0xE5, 0xEA, 0xEF, 0xF4, 0xF9, 0xFF
};

int main(void)
{
    DDRB = 0b00000111;
 132:	87 e0       	ldi	r24, 0x07	; 7
 134:	87 bb       	out	0x17, r24	; 23
    PORTB = 0;
 136:	18 ba       	out	0x18, r1	; 24
	
	// Настройка таймера
	TCCR0A = 0b10100001;
 138:	81 ea       	ldi	r24, 0xA1	; 161
 13a:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = 0b00000001;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 140:	12 be       	out	0x32, r1	; 50
	TIMSK0 = 0;
 142:	19 be       	out	0x39, r1	; 57
	
	OCR0A = 0;
 144:	16 be       	out	0x36, r1	; 54
	OCR0B = 0;
 146:	19 bc       	out	0x29, r1	; 41
	
	// Настройка АЦП
	ADMUX = 0b00100010;
 148:	82 e2       	ldi	r24, 0x22	; 34
 14a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10001111;
 14c:	8f e8       	ldi	r24, 0x8F	; 143
 14e:	86 b9       	out	0x06, r24	; 6
	
	sei();
 150:	78 94       	sei
			// Если кнопка отпущена...
			if (__BUT_PrevState == 1)
			{
				// ...но до этого нажата - инвертируем состояние нашего ШИМ-контроллера и запоминаем состояние кнопки
				__BUT_PrevState = 0;
				__PWM_Enabled ^= (1<<0);
 152:	91 e0       	ldi	r25, 0x01	; 1
				PORTB ^= (1<<PORTB2);
 154:	24 e0       	ldi	r18, 0x04	; 4
	
	sei();
    while (1) 
    {
		// Проверяем нажатие кнопки включения
		if (BUTTON == 0)
 156:	b3 99       	sbic	0x16, 3	; 22
 158:	03 c0       	rjmp	.+6      	; 0x160 <main+0x2e>
		{
			// Если кнопка нажата - запоминаем это
			__BUT_PrevState = 1;
 15a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__BUT_PrevState>
 15e:	0e c0       	rjmp	.+28     	; 0x17c <main+0x4a>
		}
		else
		{
			// Если кнопка отпущена...
			if (__BUT_PrevState == 1)
 160:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__BUT_PrevState>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	51 f4       	brne	.+20     	; 0x17c <main+0x4a>
			{
				// ...но до этого нажата - инвертируем состояние нашего ШИМ-контроллера и запоминаем состояние кнопки
				__BUT_PrevState = 0;
 168:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__BUT_PrevState>
				__PWM_Enabled ^= (1<<0);
 16c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 170:	89 27       	eor	r24, r25
 172:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				PORTB ^= (1<<PORTB2);
 176:	88 b3       	in	r24, 0x18	; 24
 178:	82 27       	eor	r24, r18
 17a:	88 bb       	out	0x18, r24	; 24
			}
		}
		
		// Если контроллер включен
		if (__PWM_Enabled)
 17c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 180:	88 23       	and	r24, r24
 182:	11 f0       	breq	.+4      	; 0x188 <main+0x56>
			// Запускаем преобразование АЦП
			ADCSRA |= (1<<ADSC);
 184:	36 9a       	sbi	0x06, 6	; 6
 186:	01 c0       	rjmp	.+2      	; 0x18a <main+0x58>
		else
			// Иначе тупо гасим свет
			OCR0A = 0;
 188:	16 be       	out	0x36, r1	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	3f ef       	ldi	r19, 0xFF	; 255
 18c:	46 e7       	ldi	r20, 0x76	; 118
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	31 50       	subi	r19, 0x01	; 1
 192:	40 40       	sbci	r20, 0x00	; 0
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x5e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x68>
 19a:	00 00       	nop
 19c:	dc cf       	rjmp	.-72     	; 0x156 <main+0x24>

0000019e <__vector_9>:
		_delay_ms(50);	
    }
}

ISR(ADC_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	// Когда закончим АЦ преобразование - пхаем в регистр ШИМ преобразованное значение яркости свечения в заполненость ШИМ (сам не понял что написал...)
	OCR0A = pgm_read_byte(&PerToFill[ADCH]);
 1ac:	e5 b1       	in	r30, 0x05	; 5
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ec 5e       	subi	r30, 0xEC	; 236
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	e4 91       	lpm	r30, Z
 1b6:	e6 bf       	out	0x36, r30	; 54
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
